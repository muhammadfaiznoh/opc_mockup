# services:
#   data_generator:
#     build:
#         dockerfile: ./container/datagenerator/Dockerfile
#     entrypoint: 
#       - python
#       - ./opc_data_generator.py
#     container_name: opc_data_generator
#     restart: on-failure
#     expose:
#       - "4840"
#     ports:
#       - "4840:4840"
#     networks:
#       - mockup_network
#   kafka_producer:
#     build:
#         dockerfile: ./container/kafka_producer/Dockerfile
#     entrypoint: 
#       - python
#       - ./kafka_producer.py
#     container_name: kafka_producer
#     restart: on-failure
#     depends_on:
#       - kafka
#   kafka_consumer:
#     build:
#         dockerfile: ./container/kafka_consumer/Dockerfile
#     entrypoint: 
#       - python
#       - ./kafka_consumer.py
#     container_name: kafka_consumer
#     restart: on-failure
#     networks:
#       - mockup_network
#     depends_on:
#       - kafka
#   zookeeper:
#     image: confluentinc/cp-zookeeper:5.3.1
#     container_name: zookeeper
#     hostname: zookeeper
#     ports:
#     - "2181:2181"
#     environment:
#       ZOOKEEPER_CLIENT_PORT: 2181
#   kafka:
#     image: confluentinc/cp-kafka:5.3.1
#     container_name: kafka
#     hostname: kafka
#     expose:
#       - "9092"
#     ports:
#     - "9092:9092"
#     restart: always
#     environment:
#       KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
#       KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
#       KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
#       KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
#       KAFKA_BROKER_ID: 1
#       KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
#       KAFKA_DEFAULT_REPLICATION_FACTOR: 1
#       KAFKA_NUM_PARTITIONS: 3
#       KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#     depends_on:
#     - zookeeper

version: '2'
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - "22181"
      - "2181"
    ports:
      - 22181:2181

  zookeeper-2:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    expose:
      - "32181"
      - "2181"
    ports:
      - 32181:2181
  
  kafka-1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      - zookeeper-2
    expose:
      - "29092"

    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper-1
      - zookeeper-2
    expose:
      - "39092"
    ports:
      - 39092:39092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-1:2181,zookeeper-2:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,PLAINTEXT_HOST://localhost:39092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka_producer:
    build:
        dockerfile: ./container/kafka_producer/Dockerfile
    container_name: kafka_producer
    restart: on-failure
    networks:
      - mockup_network
    depends_on:
      - kafka-1
      - kafka-2
  kafka_consumer:
    build:
        dockerfile: ./container/kafka_consumer/Dockerfile
    container_name: kafka_consumer
    restart: on-failure
    networks:
      - mockup_network
    depends_on:
      - kafka-1
      - kafka-2
  data_generator:
    build:
        dockerfile: ./container/datagenerator/Dockerfile
    entrypoint: 
      - python
      - ./opc_data_generator.py
    container_name: opc_data_generator
    restart: on-failure
    expose:
      - "4840"
    ports:
      - "4840:4840"
    networks:
      - mockup_network
  opc_producer:
    build:
        dockerfile: ./container/opc/Dockerfile
    entrypoint: 
      - python
      - ./opc_producer.py
    container_name: opc_producer
    restart: always
    depends_on:
      - kafka-1
      - kafka-2
    networks:
      - mockup_network
networks:
  mockup_network:
    driver: bridge
    name: mockup_network